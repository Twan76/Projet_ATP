html_nodes("td > a:nth-child(2)") %>%
html_attr("href") #Extract the redirect link for each player
# Anticipation problème accent Stefanos
player_links <- str_replace_all(player_links, "%C3%A1","a")
player_links <- str_replace_all(player_links, "%C3%A3","a")
player_links <- str_replace_all(player_links, "%C4%8D","c")
player_links <- str_replace_all(player_links, "%C3%AB","e")
player_links <- str_replace_all(player_links, "%C3%A8","e")
player_links <- str_replace_all(player_links, "%C3%A9","e")
player_links <- str_replace_all(player_links, "%C3%AD","i")
player_links <- str_replace_all(player_links, "%C3%AF","i")
player_links <- str_replace_all(player_links, "%C3%B3","o")
# player_links <- str_replace_all(player_links, "%C3%B1","n")
player_links <- str_replace_all(player_links, "%C3%BA","u")
player_links <- str_replace_all(player_links, "%C3%BC","u")
player_links <- str_replace_all(player_links, "%27","'")
# Récupérer uniquement les liens des vainqueurs de tournois
player_links <- player_links[seq(2,3*nombre_lignes,3)] #Not sure where those links at the end came from. *shrug* buh-bye
#Now grabbing the images in the infobox
player_image <- function (x) { #Creating a function that will...
html_session("https://fr.wikipedia.org/") %>% #Back to Wikipedia we go
session_jump_to(x) %>% #And go to the player's link x
html_node('.image img') %>% #Find the node of the image in the infobox
html_attr("src") #Grab its URL location
}
player_links[7]
player_image(player_links[7])
player_image(player_links[8])
player_image(player_links[9])
player_image(player_links[10])
player_image(player_links[11])
player_image(player_links[12])
player_image(player_links[13])
player_links[13]
library(XML)
library(dplyr)
library(plyr)
library(textreadr)
library(stringr)
library(rvest)
library(tibble)
library(tidyr)
library(purrr)
# Dans un premier temps, l'objectif est de récupérer les vainqueurs des tournois ATP 250
wiki_URL_ATP_250 <- "https://fr.wikipedia.org/wiki/ATP_World_Tour_250" #Storing the URL since it will be called upon multiple times.
# Web Scraping avec R
xpaths <- vector(mode = "character")
players_men_250 <- read_html(wiki_URL_ATP_250) #Read the HTML page...
players_men_250_nodes <- html_nodes(players_men_250,"table") #Extract the correct table
players_men_250_df <- html_table(players_men_250_nodes, header = TRUE, fill = TRUE)[[3]]
players_men_250_df <- separate(data = players_men_250_df, col = names(players_men_250_df[2]), into=c("Tournoi", "Lieu"), sep = ",")# Separer la colonne Tournoi et Lieu en 2 colonnes
nombre_lignes <- length(players_men_250_df[,5][players_men_250_df[,5]!=""])
players_men_250_df <- players_men_250_df[1:nombre_lignes,3:5] # Keep only the columns we need
#Now extracting the players' wiki pages so that I can look up their personal information (place of birth, height, playing position)
player_links <- read_html(wiki_URL_ATP_250) %>%
html_nodes("table") %>% .[[3]] %>%
html_nodes("td > a:nth-child(2)") %>%
html_attr("href") #Extract the redirect link for each player
# Anticipation problème accent Stefanos
# player_links <- str_replace_all(player_links, "%C3%A1","a")
# player_links <- str_replace_all(player_links, "%C3%A3","a")
# player_links <- str_replace_all(player_links, "%C4%8D","c")
# player_links <- str_replace_all(player_links, "%C3%AB","e")
# player_links <- str_replace_all(player_links, "%C3%A8","e")
# player_links <- str_replace_all(player_links, "%C3%A9","e")
# player_links <- str_replace_all(player_links, "%C3%AD","i")
# player_links <- str_replace_all(player_links, "%C3%AF","i")
# player_links <- str_replace_all(player_links, "%C3%B3","o")
# player_links <- str_replace_all(player_links, "%C3%B1","n")
# player_links <- str_replace_all(player_links, "%C3%BA","u")
# player_links <- str_replace_all(player_links, "%C3%BC","u")
# player_links <- str_replace_all(player_links, "%27","'")
# Récupérer uniquement les liens des vainqueurs de tournois
player_links <- player_links[seq(2,3*nombre_lignes,3)] #Not sure where those links at the end came from. *shrug* buh-bye
#Now grabbing the images in the infobox
player_image <- function (x) { #Creating a function that will...
html_session("https://fr.wikipedia.org/") %>% #Back to Wikipedia we go
session_jump_to(x) %>% #And go to the player's link x
html_node('.image img') %>% #Find the node of the image in the infobox
html_attr("src") #Grab its URL location
}
player_image(player_links[1])
player_image(player_links[2])
player_image(player_links[3])
player_image(player_links[4])
player_image(player_links[5])
player_image(player_links[6])
player_image(player_links[7])
player_image(player_links[8])
player_image(player_links[9])
player_image(player_links[10])
player_image(player_links[11])
player_image(player_links[12])
player_image(player_links[13])
player_image(player_links[14])
player_image(player_links[15])
player_image(player_links[16])
player_image(player_links[17])
player_image(player_links[18])
player_image(player_links[19])
player_image(player_links[20])
player_image(player_links[21])
player_image(player_links[22])
player_image(player_links[23])
player_image(player_links[24])
player_links[23]
library(XML)
library(dplyr)
library(plyr)
library(textreadr)
library(stringr)
library(rvest)
library(tibble)
library(tidyr)
library(purrr)
# Dans un premier temps, l'objectif est de récupérer les vainqueurs des tournois ATP 250
wiki_URL_ATP_250 <- "https://fr.wikipedia.org/wiki/ATP_World_Tour_250" #Storing the URL since it will be called upon multiple times.
# Web Scraping avec R
xpaths <- vector(mode = "character")
players_men_250 <- read_html(wiki_URL_ATP_250) #Read the HTML page...
players_men_250_nodes <- html_nodes(players_men_250,"table") #Extract the correct table
players_men_250_df <- html_table(players_men_250_nodes, header = TRUE, fill = TRUE)[[3]]
players_men_250_df <- separate(data = players_men_250_df, col = names(players_men_250_df[2]), into=c("Tournoi", "Lieu"), sep = ",")# Separer la colonne Tournoi et Lieu en 2 colonnes
nombre_lignes <- length(players_men_250_df[,5][players_men_250_df[,5]!=""])
players_men_250_df <- players_men_250_df[1:nombre_lignes,3:5] # Keep only the columns we need
#Now extracting the players' wiki pages so that I can look up their personal information (place of birth, height, playing position)
player_links <- read_html(wiki_URL_ATP_250) %>%
html_nodes("table") %>% .[[3]] %>%
html_nodes("td > a:nth-child(2)") %>%
html_attr("href") #Extract the redirect link for each player
# Anticipation problème accent Stefanos
# player_links <- str_replace_all(player_links, "%C3%A1","a")
# player_links <- str_replace_all(player_links, "%C3%A3","a")
# player_links <- str_replace_all(player_links, "%C4%8D","c")
# player_links <- str_replace_all(player_links, "%C3%AB","e")
# player_links <- str_replace_all(player_links, "%C3%A8","e")
# player_links <- str_replace_all(player_links, "%C3%A9","e")
# player_links <- str_replace_all(player_links, "%C3%AD","i")
# player_links <- str_replace_all(player_links, "%C3%AF","i")
# player_links <- str_replace_all(player_links, "%C3%B3","o")
# player_links <- str_replace_all(player_links, "%C3%B1","n")
# player_links <- str_replace_all(player_links, "%C3%BA","u")
# player_links <- str_replace_all(player_links, "%C3%BC","u")
# player_links <- str_replace_all(player_links, "%27","'")
# Récupérer uniquement les liens des vainqueurs de tournois
player_links <- player_links[seq(2,3*nombre_lignes,3)] #Not sure where those links at the end came from. *shrug* buh-bye
#Now grabbing the images in the infobox
player_image <- function (x) { #Creating a function that will...
html_session("https://fr.wikipedia.org/") %>% #Back to Wikipedia we go
session_jump_to(x) %>% #And go to the player's link x
html_node('.image img') %>% #Find the node of the image in the infobox
html_attr("src") #Grab its URL location
}
players_men_250_df <- mutate(players_men_250_df, image = map(player_links, player_image)) #Apply the function created above for each player
View(players_men_250_df)
player_links[23]
player_image(player_links[23])
player_image(player_links[24])
player_image(player_links[1])
html_session("https://fr.wikipedia.org/") %>% #Back to Wikipedia we go
session_jump_to("/wiki/Rafael_Nadal") %>% #And go to the player's link x
html_node('.image img') %>% #Find the node of the image in the infobox
html_attr("src") %>% .[[1]] #Grab its URL location
setwd("~/Desktop/Projet_Tennis")
max(atp_tournament_final_df$Debut)
max(atp_tournament_final$Debut)
max(atp_tournament$Debut)
library(XML)
library(plyr)
library(dplyr)
library(textreadr)
library(stringr)
library(rvest)
library(tibble)
library(tidyr)
library(purrr)
library(ggmap)
library(readr)
wiki_URL_ATP_World_Tour <- "https://www.atptour.com/en/tournaments"
#  Generalisons
noeuds <- read_html(wiki_URL_ATP_World_Tour) %>% html_nodes(xpath = '//*[@class="tourney-results-wrapper"]')
tournament_atp <- function(x) {
tournament_atp <- read_html(wiki_URL_ATP_World_Tour) %>%
html_nodes(xpath = '//*[@class="tourney-results-wrapper"]') %>%
html_table(fill = TRUE) %>% .[[x]]
tournament_atp <- tournament_atp[seq(1,nrow(tournament_atp),2),c(2,5,7)]
names(tournament_atp) <- c("Details", "Surface", "Vainqueur")
# Recuperer categorie tournoi (250, 500, etc)
categorystamp <- read_html(wiki_URL_ATP_World_Tour) %>% #Back to Wikipedia we go
html_nodes(xpath = '//*[@class="tourney-results-wrapper"]') %>% .[[x]] %>%
html_nodes("td > img") %>%
html_attr("src") #Grab its URL location
df_select_categorystamp <- data.frame(deb = str_locate(categorystamp, "/assets/atpwt/images/tournament/badges/categorystamps_")[,2])
categorystamp <- substr(categorystamp, df_select_categorystamp[,"deb"]+1, nchar(categorystamp)-4)
# Recuperer lien joueur atp world tour + photo si possible
tournament_atp <- tournament_atp %>% #Take the players data frame
mutate(Categorie = categorystamp)
# Supprimer les tournois spéciaux, type atp cup
tournament_atp <- tournament_atp[tournament_atp$Categorie %in% c("250", "500", "1000", "grandslam"),]
tournament_atp$Details <- str_replace_all(tournament_atp$Details,"  ","")
tournament_atp$Details <- str_replace_all(tournament_atp$Details,"\r\n\r\n\r\n\r\n",", ")
tournament_atp$Details <- str_replace_all(tournament_atp$Details,"\r\n","")
for(j in 1:length(tournament_atp$Details)){
if(length(unlist(str_split(tournament_atp$Details,",")[[j]]))==5) {
tournament_atp$Details[j] <- paste0(unlist(str_split(tournament_atp$Details,",")[[j]])[1],",",unlist(str_split(tournament_atp$Details,",")[[j]])[2],",",unlist(str_split(tournament_atp$Details,",")[[j]])[4],",",unlist(str_split(tournament_atp$Details,",")[[j]])[5], sep=" ")
}
}
tournament_atp$Surface <- str_replace_all(tournament_atp$Surface,"  ","")
tournament_atp$Surface <- str_replace_all(tournament_atp$Surface,"\r\n\r\n",", ")
tournament_atp$Vainqueur <- str_replace_all(tournament_atp$Vainqueur,"  ","")
df_select <- data.frame(deb = str_locate(tournament_atp$Vainqueur, "SGL")[,1], fin = str_locate(tournament_atp$Vainqueur, "DBL")[,1])
tournament_atp$Vainqueur <- substr(tournament_atp$Vainqueur, df_select[,"deb"]+3, df_select[,"fin"]-1)
tournament_atp$Vainqueur <- str_replace_all(tournament_atp$Vainqueur,"\r\n","")
tournament_atp <- separate(tournament_atp, col="Details", into=c("Tournoi","Ville","Pays","Date"), sep=",")
tournament_atp <- separate(tournament_atp, col="Date", into=c("Debut","Fin"), sep="-")
#Now extracting the players' wiki pages so that I can look up their personal information (place of birth, height, playing position)
player_links <- read_html(wiki_URL_ATP_World_Tour) %>%
html_nodes(xpath = '//*[@class="tourney-results-wrapper"]') %>% .[[x]] %>%
html_nodes("td > div > a") %>%
html_attr("href") #Extract the redirect link for each player
player_links <- player_links[seq(1,length(player_links),3)]
# Recuperer lien joueur atp world tour + photo si possible
tournament_atp <- tournament_atp %>% #Take the players data frame
mutate(player_links = player_links)
#Now grabbing the image in the infobox
# player_image <- function (x) { #Creating a function that will...
#   read_html(paste0("https://www.atptour.com",x)) %>%
#     html_node(xpath = '//*[@id="playerProfileHero"]') %>%
#     html_node("img") %>%
#     html_attr("src") #Grab its URL location
# }
# tournament_atp <- mutate(tournament_atp, image = map(player_links, player_image)) #Apply the function created above for each player
player_info <- function(x) { #Creating a function grabbing players' info that would be applied to every player.
player_info <- read_html(paste0("https://www.atptour.com",x)) %>%
html_node(xpath = '//*[@class="player-profile-hero-table"]') %>%
html_table(fill = TRUE) #Turn that info into a table
player_info <- data.frame(Age=player_info[1,1],Birthplace=player_info[2,1],TurnedPro=player_info[1,2],Play=player_info[2,2],Weight=player_info[1,3],Coach=player_info[2,3],Height=player_info[1,4])
names(player_info) = c("Age","BirthPlace","TurnedPro","Play","Weight","Coach","Height")
player_info$Age <- substr(player_info$Age,40,41)
player_info$BirthPlace <- substr(player_info$BirthPlace,117,nchar(player_info$BirthPlace))
player_info$TurnedPro <- substr(player_info$TurnedPro,nchar(player_info$TurnedPro)-3,nchar(player_info$TurnedPro))
player_info$Play <- substr(player_info$Play,76,nchar(player_info$Play))
player_info$Weight <- substr(player_info$Weight, str_locate(player_info$Weight, "\\(")[,1]+1, str_locate(player_info$Weight, "\\)")[,1]-1)
player_info$Coach  <- str_replace(player_info$Coach, "Coach", "")
player_info$Coach  <- str_replace_all(player_info$Coach, "\r\n", "")
player_info$Coach  <- str_replace_all(player_info$Coach, "  ", "")
player_info$Height <- substr(player_info$Height, str_locate(player_info$Height, "\\(")[,1]+1, str_locate(player_info$Height, "\\)")[,1]-1)
return(player_info)
}
tournament_atp <- mutate(tournament_atp, player_data = map(player_links, player_info)) %>% unnest(player_data)
# For each tournament, we add long and lat
tournament_atp <- mutate_geocode(tournament_atp, Ville, source = "google", output = "more") %>%
mutate(
country = str_extract(address, "(?<=, )[^,]*$") # everything after last comma
)
tournament_atp <- tournament_atp %>%
select(-type, -loctype, -address, -north, -south, -east, -west, -country) #Remove unneeded columns
#  Format date
tournament_atp$Debut <- str_replace_all(tournament_atp$Debut, " ", "")
tournament_atp$Debut <- str_replace_all(tournament_atp$Debut, "\\.", "/")
tournament_atp$Debut <- as.Date(tournament_atp$Debut)
tournament_atp$Fin <- str_replace_all(tournament_atp$Fin, " ", "")
tournament_atp$Fin <- str_replace_all(tournament_atp$Fin, "\\.", "/")
tournament_atp$Fin <- as.Date(tournament_atp$Fin)
# Renommer les catégories
select_atp_250 <- (tournament_atp$Categorie == 250)
select_atp_500 <- (tournament_atp$Categorie == 500)
select_atp_1000 <- (tournament_atp$Categorie == 1000)
select_atp_grand_chelem <- (tournament_atp$Categorie == "grandslam")
tournament_atp[select_atp_250,8] <- "ATP 250"
tournament_atp[select_atp_500,8] <- "ATP 500"
tournament_atp[select_atp_1000,8] <- "Masters 1000"
tournament_atp[select_atp_grand_chelem,8] <- "Grand Chelem"
return(tournament_atp)
}
tournament_atp_final <- rbind(tournament_atp(1), tournament_atp(2), tournament_atp(3), tournament_atp(4), tournament_atp(5), tournament_atp(6), tournament_atp(7))
register_google("AIzaSyDGPsVbY4SAHFjGgscCNTUcGb3DyTZWST0")
library(XML)
library(plyr)
library(dplyr)
library(textreadr)
library(stringr)
library(rvest)
library(tibble)
library(tidyr)
library(purrr)
library(ggmap)
library(readr)
wiki_URL_ATP_World_Tour <- "https://www.atptour.com/en/tournaments"
#  Generalisons
noeuds <- read_html(wiki_URL_ATP_World_Tour) %>% html_nodes(xpath = '//*[@class="tourney-results-wrapper"]')
tournament_atp <- function(x) {
tournament_atp <- read_html(wiki_URL_ATP_World_Tour) %>%
html_nodes(xpath = '//*[@class="tourney-results-wrapper"]') %>%
html_table(fill = TRUE) %>% .[[x]]
tournament_atp <- tournament_atp[seq(1,nrow(tournament_atp),2),c(2,5,7)]
names(tournament_atp) <- c("Details", "Surface", "Vainqueur")
# Recuperer categorie tournoi (250, 500, etc)
categorystamp <- read_html(wiki_URL_ATP_World_Tour) %>% #Back to Wikipedia we go
html_nodes(xpath = '//*[@class="tourney-results-wrapper"]') %>% .[[x]] %>%
html_nodes("td > img") %>%
html_attr("src") #Grab its URL location
df_select_categorystamp <- data.frame(deb = str_locate(categorystamp, "/assets/atpwt/images/tournament/badges/categorystamps_")[,2])
categorystamp <- substr(categorystamp, df_select_categorystamp[,"deb"]+1, nchar(categorystamp)-4)
# Recuperer lien joueur atp world tour + photo si possible
tournament_atp <- tournament_atp %>% #Take the players data frame
mutate(Categorie = categorystamp)
# Supprimer les tournois spéciaux, type atp cup
tournament_atp <- tournament_atp[tournament_atp$Categorie %in% c("250", "500", "1000", "grandslam"),]
tournament_atp$Details <- str_replace_all(tournament_atp$Details,"  ","")
tournament_atp$Details <- str_replace_all(tournament_atp$Details,"\r\n\r\n\r\n\r\n",", ")
tournament_atp$Details <- str_replace_all(tournament_atp$Details,"\r\n","")
for(j in 1:length(tournament_atp$Details)){
if(length(unlist(str_split(tournament_atp$Details,",")[[j]]))==5) {
tournament_atp$Details[j] <- paste0(unlist(str_split(tournament_atp$Details,",")[[j]])[1],",",unlist(str_split(tournament_atp$Details,",")[[j]])[2],",",unlist(str_split(tournament_atp$Details,",")[[j]])[4],",",unlist(str_split(tournament_atp$Details,",")[[j]])[5], sep=" ")
}
}
tournament_atp$Surface <- str_replace_all(tournament_atp$Surface,"  ","")
tournament_atp$Surface <- str_replace_all(tournament_atp$Surface,"\r\n\r\n",", ")
tournament_atp$Vainqueur <- str_replace_all(tournament_atp$Vainqueur,"  ","")
df_select <- data.frame(deb = str_locate(tournament_atp$Vainqueur, "SGL")[,1], fin = str_locate(tournament_atp$Vainqueur, "DBL")[,1])
tournament_atp$Vainqueur <- substr(tournament_atp$Vainqueur, df_select[,"deb"]+3, df_select[,"fin"]-1)
tournament_atp$Vainqueur <- str_replace_all(tournament_atp$Vainqueur,"\r\n","")
tournament_atp <- separate(tournament_atp, col="Details", into=c("Tournoi","Ville","Pays","Date"), sep=",")
tournament_atp <- separate(tournament_atp, col="Date", into=c("Debut","Fin"), sep="-")
#Now extracting the players' wiki pages so that I can look up their personal information (place of birth, height, playing position)
player_links <- read_html(wiki_URL_ATP_World_Tour) %>%
html_nodes(xpath = '//*[@class="tourney-results-wrapper"]') %>% .[[x]] %>%
html_nodes("td > div > a") %>%
html_attr("href") #Extract the redirect link for each player
player_links <- player_links[seq(1,length(player_links),3)]
# Recuperer lien joueur atp world tour + photo si possible
tournament_atp <- tournament_atp %>% #Take the players data frame
mutate(player_links = player_links)
#Now grabbing the image in the infobox
# player_image <- function (x) { #Creating a function that will...
#   read_html(paste0("https://www.atptour.com",x)) %>%
#     html_node(xpath = '//*[@id="playerProfileHero"]') %>%
#     html_node("img") %>%
#     html_attr("src") #Grab its URL location
# }
# tournament_atp <- mutate(tournament_atp, image = map(player_links, player_image)) #Apply the function created above for each player
player_info <- function(x) { #Creating a function grabbing players' info that would be applied to every player.
player_info <- read_html(paste0("https://www.atptour.com",x)) %>%
html_node(xpath = '//*[@class="player-profile-hero-table"]') %>%
html_table(fill = TRUE) #Turn that info into a table
player_info <- data.frame(Age=player_info[1,1],Birthplace=player_info[2,1],TurnedPro=player_info[1,2],Play=player_info[2,2],Weight=player_info[1,3],Coach=player_info[2,3],Height=player_info[1,4])
names(player_info) = c("Age","BirthPlace","TurnedPro","Play","Weight","Coach","Height")
player_info$Age <- substr(player_info$Age,40,41)
player_info$BirthPlace <- substr(player_info$BirthPlace,117,nchar(player_info$BirthPlace))
player_info$TurnedPro <- substr(player_info$TurnedPro,nchar(player_info$TurnedPro)-3,nchar(player_info$TurnedPro))
player_info$Play <- substr(player_info$Play,76,nchar(player_info$Play))
player_info$Weight <- substr(player_info$Weight, str_locate(player_info$Weight, "\\(")[,1]+1, str_locate(player_info$Weight, "\\)")[,1]-1)
player_info$Coach  <- str_replace(player_info$Coach, "Coach", "")
player_info$Coach  <- str_replace_all(player_info$Coach, "\r\n", "")
player_info$Coach  <- str_replace_all(player_info$Coach, "  ", "")
player_info$Height <- substr(player_info$Height, str_locate(player_info$Height, "\\(")[,1]+1, str_locate(player_info$Height, "\\)")[,1]-1)
return(player_info)
}
tournament_atp <- mutate(tournament_atp, player_data = map(player_links, player_info)) %>% unnest(player_data)
# For each tournament, we add long and lat
tournament_atp <- mutate_geocode(tournament_atp, Ville, source = "google", output = "more") %>%
mutate(
country = str_extract(address, "(?<=, )[^,]*$") # everything after last comma
)
tournament_atp <- tournament_atp %>%
select(-type, -loctype, -address, -north, -south, -east, -west, -country) #Remove unneeded columns
#  Format date
tournament_atp$Debut <- str_replace_all(tournament_atp$Debut, " ", "")
tournament_atp$Debut <- str_replace_all(tournament_atp$Debut, "\\.", "/")
tournament_atp$Debut <- as.Date(tournament_atp$Debut)
tournament_atp$Fin <- str_replace_all(tournament_atp$Fin, " ", "")
tournament_atp$Fin <- str_replace_all(tournament_atp$Fin, "\\.", "/")
tournament_atp$Fin <- as.Date(tournament_atp$Fin)
# Renommer les catégories
select_atp_250 <- (tournament_atp$Categorie == 250)
select_atp_500 <- (tournament_atp$Categorie == 500)
select_atp_1000 <- (tournament_atp$Categorie == 1000)
select_atp_grand_chelem <- (tournament_atp$Categorie == "grandslam")
tournament_atp[select_atp_250,8] <- "ATP 250"
tournament_atp[select_atp_500,8] <- "ATP 500"
tournament_atp[select_atp_1000,8] <- "Masters 1000"
tournament_atp[select_atp_grand_chelem,8] <- "Grand Chelem"
return(tournament_atp)
}
tournament_atp_final <- rbind(tournament_atp(1), tournament_atp(2), tournament_atp(3), tournament_atp(4), tournament_atp(5), tournament_atp(6), tournament_atp(7))
tournament_atp_final$icon_tournoi <- vector(length=length(tournament_atp_final$Tournoi))
for(i in 1:length(tournament_atp_final$Tournoi)){
if(tournament_atp_final$Tournoi[i] == "Abierto Mexicano Telcel presentado por HSBC") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/acapulco.png"}
else if(tournament_atp_final$Tournoi[i] == "ABN AMRO Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/rotterdam.png"}
else if(tournament_atp_final$Tournoi[i] == "Adelaide International 1") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/adelaide.png"}
else if(tournament_atp_final$Tournoi[i] == "Adelaide International 2") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/adelaide.png"}
else if(tournament_atp_final$Tournoi[i] == "Argentina Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/buenos_aires.png"}
else if(tournament_atp_final$Tournoi[i] == "Atlanta Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/atlanta.png"}
else if(tournament_atp_final$Tournoi[i] == "Australian Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/australian_open.png"}
else if(tournament_atp_final$Tournoi[i] == "Barcelona Open Banc Sabadell") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/barcelone.png"}
else if(tournament_atp_final$Tournoi[i] == "BMW Open by American Express") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/munich.png"}
else if(tournament_atp_final$Tournoi[i] == "BNP Paribas Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/indian_wells.png"}
else if(tournament_atp_final$Tournoi[i] == "BOSS OPEN") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/stuttgart.png"}
else if(tournament_atp_final$Tournoi[i] == "Chile Dove Men+Care Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/santiago.png"}
else if(tournament_atp_final$Tournoi[i] == "Cinch Championships") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/london.png"}
else if(tournament_atp_final$Tournoi[i] == "Cordoba Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/cordoba.png"}
else if(tournament_atp_final$Tournoi[i] == "Dallas Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/dallas.png"}
else if(tournament_atp_final$Tournoi[i] == "Delray Beach Open by VITACOST.com") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/delray_beach.png"}
else if(tournament_atp_final$Tournoi[i] == "Dubai Duty Free Tennis Championships") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/dubai.png"}
else if(tournament_atp_final$Tournoi[i] == "EFG Swiss Open Gstaad") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/gstaad.png"}
else if(tournament_atp_final$Tournoi[i] == "Fayez Sarofim & Co. U.S. Men's Clay Court Championship") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/houston.png"}
else if(tournament_atp_final$Tournoi[i] == "Generali Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/kitzbuhel.png"}
else if(tournament_atp_final$Tournoi[i] == "Gonet Geneva Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/geneve.png"}
else if(tournament_atp_final$Tournoi[i] == "Grand Prix Hassan II") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/marrakech.png"}
else if(tournament_atp_final$Tournoi[i] == "Hamburg European Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/hamburg.png"}
else if(tournament_atp_final$Tournoi[i] == "Infosys Hall of Fame Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/newport.png"}
else if(tournament_atp_final$Tournoi[i] == "Internazionali BNL d'Italia") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/rome.png"}
else if(tournament_atp_final$Tournoi[i] == "Libema Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/hertogenbosch.png"}
else if(tournament_atp_final$Tournoi[i] == "Mallorca Championships") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/mallorca.png"}
else if(tournament_atp_final$Tournoi[i] == "Melbourne Summer Set") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/melbourne.png"}
else if(tournament_atp_final$Tournoi[i] == "Miami Open presented by Itau") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/miami.png"}
else if(tournament_atp_final$Tournoi[i] == "Millennium Estoril Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/estoril.png"}
else if(tournament_atp_final$Tournoi[i] == "Mutua Madrid Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/madrid.png"}
else if(tournament_atp_final$Tournoi[i] == "Nordea Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/bastad.png"}
else if(tournament_atp_final$Tournoi[i] == "Open 13 Provence") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/marseille.png"}
else if(tournament_atp_final$Tournoi[i] == "Open Parc Auvergne-Rhone-Alpes Lyon") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/lyon.png"}
else if(tournament_atp_final$Tournoi[i] == "Open Sud de France – Montpellier") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/montpellier.png"}
else if(tournament_atp_final$Tournoi[i] == "Plava Laguna Croatia Open Umag") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/umag.png"}
else if(tournament_atp_final$Tournoi[i] == "Qatar ExxonMobil Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/doha.png"}
else if(tournament_atp_final$Tournoi[i] == "Rio Open presented by Claro") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/rio.png"}
else if(tournament_atp_final$Tournoi[i] == "Roland Garros") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/roland_garros.png"}
else if(tournament_atp_final$Tournoi[i] == "Rolex Monte-Carlo Masters") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/monte_carlo.png"}
else if(tournament_atp_final$Tournoi[i] == "Rothesay International") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/eastbourne.png"}
else if(tournament_atp_final$Tournoi[i] == "Serbia Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/belgrade.png"}
else if(tournament_atp_final$Tournoi[i] == "Sydney Tennis Classic") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/sydney.png"}
else if(tournament_atp_final$Tournoi[i] == "Tata Open Maharashtra") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/pune.png"}
else if(tournament_atp_final$Tournoi[i] == "Terra Wortmann Open") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/halle.png"}
else if(tournament_atp_final$Tournoi[i] == "Wimbledon") { tournament_atp_final$icon_tournoi[i] <- "www/tournaments/wimbledon.png"}
}
tournament_atp_final$icon_joueur <- vector(length=length(tournament_atp_final$Vainqueur))
for(i in 1:length(tournament_atp_final$Vainqueur)){
if(tournament_atp_final$Vainqueur[i] == "Rafael Nadal") { tournament_atp_final$icon_joueur[i] <- "www/players/nadal.png"}
else if(tournament_atp_final$Vainqueur[i] == "Aslan Karatsev") { tournament_atp_final$icon_joueur[i] <- "www/players/karatsev.png"}
else if(tournament_atp_final$Vainqueur[i] == "Thanasi Kokkinakis") { tournament_atp_final$icon_joueur[i] <- "www/players/kokkinakis.png"}
else if(tournament_atp_final$Vainqueur[i] == "Joao Sousa") { tournament_atp_final$icon_joueur[i] <- "www/players/sousa.png"}
else if(tournament_atp_final$Vainqueur[i] == "Gael Monfils") { tournament_atp_final$icon_joueur[i] <- "www/players/monfils.png"}
else if(tournament_atp_final$Vainqueur[i] == "Albert Ramos-Vinolas") { tournament_atp_final$icon_joueur[i] <- "www/players/ramos-vinolas.png"}
else if(tournament_atp_final$Vainqueur[i] == "Alexander Bublik") { tournament_atp_final$icon_joueur[i] <- "www/players/bublik.png"}
else if(tournament_atp_final$Vainqueur[i] == "Carlos Alcaraz") { tournament_atp_final$icon_joueur[i] <- "www/players/alcaraz.png"}
else if(tournament_atp_final$Vainqueur[i] == "Felix Auger-Aliassime") { tournament_atp_final$icon_joueur[i] <- "www/players/auger-aliassime.png"}
else if(tournament_atp_final$Vainqueur[i] == "Sebastian Baez") { tournament_atp_final$icon_joueur[i] <- "www/players/baez.png"}
else if(tournament_atp_final$Vainqueur[i] == "Roberto Bautista Agut") { tournament_atp_final$icon_joueur[i] <- "www/players/bautista-agut.png"}
else if(tournament_atp_final$Vainqueur[i] == "Matteo Berrettini") { tournament_atp_final$icon_joueur[i] <- "www/players/berrettini.png"}
else if(tournament_atp_final$Vainqueur[i] == "Francisco Cerundolo") { tournament_atp_final$icon_joueur[i] <- "www/players/cerundolo.png"}
else if(tournament_atp_final$Vainqueur[i] == "Maxime Cressy") { tournament_atp_final$icon_joueur[i] <- "www/players/cressy.png"}
else if(tournament_atp_final$Vainqueur[i] == "Alex de Minaur") { tournament_atp_final$icon_joueur[i] <- "www/players/de_minaur.png"}
else if(tournament_atp_final$Vainqueur[i] == "Novak Djokovic") { tournament_atp_final$icon_joueur[i] <- "www/players/djokovic.png"}
else if(tournament_atp_final$Vainqueur[i] == "Taylor Fritz") { tournament_atp_final$icon_joueur[i] <- "www/players/fritz.png"}
else if(tournament_atp_final$Vainqueur[i] == "David Goffin") { tournament_atp_final$icon_joueur[i] <- "www/players/goffin.png"}
else if(tournament_atp_final$Vainqueur[i] == "Hubert Hurkacz") { tournament_atp_final$icon_joueur[i] <- "www/players/hurkacz.png"}
else if(tournament_atp_final$Vainqueur[i] == "Pedro Martinez") { tournament_atp_final$icon_joueur[i] <- "www/players/martinez.png"}
else if(tournament_atp_final$Vainqueur[i] == "Lorenzo Musetti") { tournament_atp_final$icon_joueur[i] <- "www/players/musetti.png"}
else if(tournament_atp_final$Vainqueur[i] == "Cameron Norrie") { tournament_atp_final$icon_joueur[i] <- "www/players/norrie.png"}
else if(tournament_atp_final$Vainqueur[i] == "Reilly Opelka") { tournament_atp_final$icon_joueur[i] <- "www/players/opelka.png"}
else if(tournament_atp_final$Vainqueur[i] == "Andrey Rublev") { tournament_atp_final$icon_joueur[i] <- "www/players/rublev.png"}
else if(tournament_atp_final$Vainqueur[i] == "Holger Rune") { tournament_atp_final$icon_joueur[i] <- "www/players/rune.png"}
else if(tournament_atp_final$Vainqueur[i] == "Casper Ruud") { tournament_atp_final$icon_joueur[i] <- "www/players/ruud.png"}
else if(tournament_atp_final$Vainqueur[i] == "Jannik Sinner") { tournament_atp_final$icon_joueur[i] <- "www/players/sinner.png"}
else if(tournament_atp_final$Vainqueur[i] == "Stefanos Tsitsipas") { tournament_atp_final$icon_joueur[i] <- "www/players/tsitsipas.png"}
else if(tournament_atp_final$Vainqueur[i] == "Tim Van Rijhtoven") { tournament_atp_final$icon_joueur[i] <- "www/players/van_rijthoven.png"}
}
tournament_atp_final <- mutate(tournament_atp_final,
links = paste0("https://www.atptour.com", player_links), #Bringing in player links
popup_text = paste0("<center>", #Setting up poopup info
ifelse(!is.na(icon_joueur), paste0("<img src='",icon_joueur,"' width='100'>"), ""),
"</br><b>Vainqueur : </b> ", Vainqueur,
"</br><b>Age : </b> ", Age,
"</br><b>Naissance : </b> ", BirthPlace,
"</br><b>Prise de raquette :</b> ", Play,
"</br><b>Taille :</b> ", Height,
"</br><b>Poids :</b> ", Weight,
"</br><b>Coach :</b> ", Coach,
"</br><b>Pro depuis :</b> ", TurnedPro,
"</br><a href='", links, "' target='_blank'>More info...</a></center>"))
tournament_atp_final <- mutate(tournament_atp_final,
label_text = paste0("<center>", #Setting up poopup info
" <b>Tournoi : </b> ", Tournoi,",", Ville,",", Pays,
"</br><b>Surface : </b> ", Surface,
"</br><b> Date : </b> ", "Du ", format(Debut,"%d/%m/%Y"), " au ", format(Fin, "%d/%m/%Y"),
"</br><b>Catégorie :</b> ", Categorie,
"</br>", ifelse(!is.na(icon_joueur), paste0("<img src='",icon_tournoi,"' width='100'>"), ""),"</center>") %>% lapply(htmltools::HTML))
#Saving for the app
write_rds(tournament_atp_final, "tournament_atp_final.rds")
max(atp_tournament_final_df$Debut
)
tournament_atp_final_df <- read_rds("tournament_atp_final.rds")
max(atp_tournament_final_df$Debut)
max(tournament_atp_final_df$Debut)
as.Date(max(tournament_atp_final_df$Debut),"%d-%m-%Y")
format(max(tournament_atp_final_df$Debut),"%d-%m-%Y")
v
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
library(golem)
